/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * Address Book
 * The Address Book API description
 * OpenAPI spec version: 1.0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "react-query";
import type { Contact, CreateContactDto, UpdateContactDto } from "../model";
import { customInstance, ErrorType } from "../mutator/custom-instance";

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

export const appControllerGetHello = (signal?: AbortSignal) => {
  return customInstance<void>({ url: `/api/v1`, method: "get", signal });
};

export const getAppControllerGetHelloQueryKey = () => [`/api/v1`];

export type AppControllerGetHelloQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHello>>
>;
export type AppControllerGetHelloQueryError = ErrorType<unknown>;

export const useAppControllerGetHello = <
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetHello>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof appControllerGetHello>>
  > = ({ signal }) => appControllerGetHello(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof appControllerGetHello>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

export const createContact = (createContactDto: CreateContactDto) => {
  return customInstance<Contact>({
    url: `/api/v1/contact`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: createContactDto,
  });
};

export type CreateContactMutationResult = NonNullable<
  Awaited<ReturnType<typeof createContact>>
>;
export type CreateContactMutationBody = CreateContactDto;
export type CreateContactMutationError = ErrorType<unknown>;

export const useCreateContact = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createContact>>,
    TError,
    { data: CreateContactDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createContact>>,
    { data: CreateContactDto }
  > = (props) => {
    const { data } = props ?? {};

    return createContact(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof createContact>>,
    TError,
    { data: CreateContactDto },
    TContext
  >(mutationFn, mutationOptions);
};

export const contacts = (signal?: AbortSignal) => {
  return customInstance<Contact[]>({
    url: `/api/v1/contact/all`,
    method: "get",
    signal,
  });
};

export const getContactsQueryKey = () => [`/api/v1/contact/all`];

export type ContactsQueryResult = NonNullable<
  Awaited<ReturnType<typeof contacts>>
>;
export type ContactsQueryError = ErrorType<unknown>;

export const useContacts = <
  TData = Awaited<ReturnType<typeof contacts>>,
  TError = ErrorType<unknown>
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof contacts>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getContactsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof contacts>>> = ({
    signal,
  }) => contacts(signal);

  const query = useQuery<Awaited<ReturnType<typeof contacts>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const contact = (id: unknown, signal?: AbortSignal) => {
  return customInstance<Contact>({
    url: `/api/v1/contact/${id}`,
    method: "get",
    signal,
  });
};

export const getContactQueryKey = (id: unknown) => [`/api/v1/contact/${id}`];

export type ContactQueryResult = NonNullable<
  Awaited<ReturnType<typeof contact>>
>;
export type ContactQueryError = ErrorType<unknown>;

export const useContact = <
  TData = Awaited<ReturnType<typeof contact>>,
  TError = ErrorType<unknown>
>(
  id: unknown,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof contact>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getContactQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof contact>>> = ({
    signal,
  }) => contact(id, signal);

  const query = useQuery<Awaited<ReturnType<typeof contact>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const updateContact = (
  id: unknown,
  updateContactDto: UpdateContactDto
) => {
  return customInstance<Contact>({
    url: `/api/v1/contact/${id}`,
    method: "patch",
    headers: { "Content-Type": "application/json" },
    data: updateContactDto,
  });
};

export type UpdateContactMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateContact>>
>;
export type UpdateContactMutationBody = UpdateContactDto;
export type UpdateContactMutationError = ErrorType<unknown>;

export const useUpdateContact = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateContact>>,
    TError,
    { id: unknown; data: UpdateContactDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateContact>>,
    { id: unknown; data: UpdateContactDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateContact(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof updateContact>>,
    TError,
    { id: unknown; data: UpdateContactDto },
    TContext
  >(mutationFn, mutationOptions);
};

export const deleteContact = (id: unknown) => {
  return customInstance<Contact>({
    url: `/api/v1/contact/${id}`,
    method: "delete",
  });
};

export type DeleteContactMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteContact>>
>;

export type DeleteContactMutationError = ErrorType<unknown>;

export const useDeleteContact = <
  TError = ErrorType<unknown>,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteContact>>,
    TError,
    { id: unknown },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteContact>>,
    { id: unknown }
  > = (props) => {
    const { id } = props ?? {};

    return deleteContact(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteContact>>,
    TError,
    { id: unknown },
    TContext
  >(mutationFn, mutationOptions);
};
